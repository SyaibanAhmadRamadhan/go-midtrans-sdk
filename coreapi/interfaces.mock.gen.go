// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -typed=true -destination=interfaces.mock.gen.go -package=coreapi_midtrans
//

// Package coreapi_midtrans is a generated GoMock package.
package coreapi_midtrans

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPaymentAPI is a mock of PaymentAPI interface.
type MockPaymentAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentAPIMockRecorder
	isgomock struct{}
}

// MockPaymentAPIMockRecorder is the mock recorder for MockPaymentAPI.
type MockPaymentAPIMockRecorder struct {
	mock *MockPaymentAPI
}

// NewMockPaymentAPI creates a new mock instance.
func NewMockPaymentAPI(ctrl *gomock.Controller) *MockPaymentAPI {
	mock := &MockPaymentAPI{ctrl: ctrl}
	mock.recorder = &MockPaymentAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentAPI) EXPECT() *MockPaymentAPIMockRecorder {
	return m.recorder
}

// ChargeGoPay mocks base method.
func (m *MockPaymentAPI) ChargeGoPay(ctx context.Context, input ChargeGoPayInput) (ChargeGoPayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChargeGoPay", ctx, input)
	ret0, _ := ret[0].(ChargeGoPayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChargeGoPay indicates an expected call of ChargeGoPay.
func (mr *MockPaymentAPIMockRecorder) ChargeGoPay(ctx, input any) *MockPaymentAPIChargeGoPayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeGoPay", reflect.TypeOf((*MockPaymentAPI)(nil).ChargeGoPay), ctx, input)
	return &MockPaymentAPIChargeGoPayCall{Call: call}
}

// MockPaymentAPIChargeGoPayCall wrap *gomock.Call
type MockPaymentAPIChargeGoPayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPaymentAPIChargeGoPayCall) Return(output ChargeGoPayOutput, err error) *MockPaymentAPIChargeGoPayCall {
	c.Call = c.Call.Return(output, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPaymentAPIChargeGoPayCall) Do(f func(context.Context, ChargeGoPayInput) (ChargeGoPayOutput, error)) *MockPaymentAPIChargeGoPayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPaymentAPIChargeGoPayCall) DoAndReturn(f func(context.Context, ChargeGoPayInput) (ChargeGoPayOutput, error)) *MockPaymentAPIChargeGoPayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChargeQRIS mocks base method.
func (m *MockPaymentAPI) ChargeQRIS(ctx context.Context, input ChargeQRISInput) (ChargeQRISOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChargeQRIS", ctx, input)
	ret0, _ := ret[0].(ChargeQRISOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChargeQRIS indicates an expected call of ChargeQRIS.
func (mr *MockPaymentAPIMockRecorder) ChargeQRIS(ctx, input any) *MockPaymentAPIChargeQRISCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeQRIS", reflect.TypeOf((*MockPaymentAPI)(nil).ChargeQRIS), ctx, input)
	return &MockPaymentAPIChargeQRISCall{Call: call}
}

// MockPaymentAPIChargeQRISCall wrap *gomock.Call
type MockPaymentAPIChargeQRISCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPaymentAPIChargeQRISCall) Return(output ChargeQRISOutput, err error) *MockPaymentAPIChargeQRISCall {
	c.Call = c.Call.Return(output, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPaymentAPIChargeQRISCall) Do(f func(context.Context, ChargeQRISInput) (ChargeQRISOutput, error)) *MockPaymentAPIChargeQRISCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPaymentAPIChargeQRISCall) DoAndReturn(f func(context.Context, ChargeQRISInput) (ChargeQRISOutput, error)) *MockPaymentAPIChargeQRISCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChargeShopeePay mocks base method.
func (m *MockPaymentAPI) ChargeShopeePay(ctx context.Context, input ChargeShopeePayInput) (ChargeShopeePayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChargeShopeePay", ctx, input)
	ret0, _ := ret[0].(ChargeShopeePayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChargeShopeePay indicates an expected call of ChargeShopeePay.
func (mr *MockPaymentAPIMockRecorder) ChargeShopeePay(ctx, input any) *MockPaymentAPIChargeShopeePayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeShopeePay", reflect.TypeOf((*MockPaymentAPI)(nil).ChargeShopeePay), ctx, input)
	return &MockPaymentAPIChargeShopeePayCall{Call: call}
}

// MockPaymentAPIChargeShopeePayCall wrap *gomock.Call
type MockPaymentAPIChargeShopeePayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPaymentAPIChargeShopeePayCall) Return(output ChargeShopeePayOutput, err error) *MockPaymentAPIChargeShopeePayCall {
	c.Call = c.Call.Return(output, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPaymentAPIChargeShopeePayCall) Do(f func(context.Context, ChargeShopeePayInput) (ChargeShopeePayOutput, error)) *MockPaymentAPIChargeShopeePayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPaymentAPIChargeShopeePayCall) DoAndReturn(f func(context.Context, ChargeShopeePayInput) (ChargeShopeePayOutput, error)) *MockPaymentAPIChargeShopeePayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockChargeEWalletAPI is a mock of ChargeEWalletAPI interface.
type MockChargeEWalletAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChargeEWalletAPIMockRecorder
	isgomock struct{}
}

// MockChargeEWalletAPIMockRecorder is the mock recorder for MockChargeEWalletAPI.
type MockChargeEWalletAPIMockRecorder struct {
	mock *MockChargeEWalletAPI
}

// NewMockChargeEWalletAPI creates a new mock instance.
func NewMockChargeEWalletAPI(ctrl *gomock.Controller) *MockChargeEWalletAPI {
	mock := &MockChargeEWalletAPI{ctrl: ctrl}
	mock.recorder = &MockChargeEWalletAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChargeEWalletAPI) EXPECT() *MockChargeEWalletAPIMockRecorder {
	return m.recorder
}

// ChargeGoPay mocks base method.
func (m *MockChargeEWalletAPI) ChargeGoPay(ctx context.Context, input ChargeGoPayInput) (ChargeGoPayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChargeGoPay", ctx, input)
	ret0, _ := ret[0].(ChargeGoPayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChargeGoPay indicates an expected call of ChargeGoPay.
func (mr *MockChargeEWalletAPIMockRecorder) ChargeGoPay(ctx, input any) *MockChargeEWalletAPIChargeGoPayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeGoPay", reflect.TypeOf((*MockChargeEWalletAPI)(nil).ChargeGoPay), ctx, input)
	return &MockChargeEWalletAPIChargeGoPayCall{Call: call}
}

// MockChargeEWalletAPIChargeGoPayCall wrap *gomock.Call
type MockChargeEWalletAPIChargeGoPayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChargeEWalletAPIChargeGoPayCall) Return(output ChargeGoPayOutput, err error) *MockChargeEWalletAPIChargeGoPayCall {
	c.Call = c.Call.Return(output, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChargeEWalletAPIChargeGoPayCall) Do(f func(context.Context, ChargeGoPayInput) (ChargeGoPayOutput, error)) *MockChargeEWalletAPIChargeGoPayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChargeEWalletAPIChargeGoPayCall) DoAndReturn(f func(context.Context, ChargeGoPayInput) (ChargeGoPayOutput, error)) *MockChargeEWalletAPIChargeGoPayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChargeQRIS mocks base method.
func (m *MockChargeEWalletAPI) ChargeQRIS(ctx context.Context, input ChargeQRISInput) (ChargeQRISOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChargeQRIS", ctx, input)
	ret0, _ := ret[0].(ChargeQRISOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChargeQRIS indicates an expected call of ChargeQRIS.
func (mr *MockChargeEWalletAPIMockRecorder) ChargeQRIS(ctx, input any) *MockChargeEWalletAPIChargeQRISCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeQRIS", reflect.TypeOf((*MockChargeEWalletAPI)(nil).ChargeQRIS), ctx, input)
	return &MockChargeEWalletAPIChargeQRISCall{Call: call}
}

// MockChargeEWalletAPIChargeQRISCall wrap *gomock.Call
type MockChargeEWalletAPIChargeQRISCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChargeEWalletAPIChargeQRISCall) Return(output ChargeQRISOutput, err error) *MockChargeEWalletAPIChargeQRISCall {
	c.Call = c.Call.Return(output, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChargeEWalletAPIChargeQRISCall) Do(f func(context.Context, ChargeQRISInput) (ChargeQRISOutput, error)) *MockChargeEWalletAPIChargeQRISCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChargeEWalletAPIChargeQRISCall) DoAndReturn(f func(context.Context, ChargeQRISInput) (ChargeQRISOutput, error)) *MockChargeEWalletAPIChargeQRISCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ChargeShopeePay mocks base method.
func (m *MockChargeEWalletAPI) ChargeShopeePay(ctx context.Context, input ChargeShopeePayInput) (ChargeShopeePayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChargeShopeePay", ctx, input)
	ret0, _ := ret[0].(ChargeShopeePayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChargeShopeePay indicates an expected call of ChargeShopeePay.
func (mr *MockChargeEWalletAPIMockRecorder) ChargeShopeePay(ctx, input any) *MockChargeEWalletAPIChargeShopeePayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChargeShopeePay", reflect.TypeOf((*MockChargeEWalletAPI)(nil).ChargeShopeePay), ctx, input)
	return &MockChargeEWalletAPIChargeShopeePayCall{Call: call}
}

// MockChargeEWalletAPIChargeShopeePayCall wrap *gomock.Call
type MockChargeEWalletAPIChargeShopeePayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChargeEWalletAPIChargeShopeePayCall) Return(output ChargeShopeePayOutput, err error) *MockChargeEWalletAPIChargeShopeePayCall {
	c.Call = c.Call.Return(output, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChargeEWalletAPIChargeShopeePayCall) Do(f func(context.Context, ChargeShopeePayInput) (ChargeShopeePayOutput, error)) *MockChargeEWalletAPIChargeShopeePayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChargeEWalletAPIChargeShopeePayCall) DoAndReturn(f func(context.Context, ChargeShopeePayInput) (ChargeShopeePayOutput, error)) *MockChargeEWalletAPIChargeShopeePayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
